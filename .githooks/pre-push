#!/bin/sh

# An example hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local sha1> <remote ref> <remote sha1>
#
# This sample shows how to prevent push of commits where the log message starts
# with "WIP" (work in progress).

remote="$1"
url="$2"

RED='\033[0;31m'
YELLOW='\033[1;33m'
PURPLE='\033[0;35m'
BLUE='\033[0;34m'
GREEN='\033[0;32m'
NC='\033[0m' # No Color

z40=0000000000000000000000000000000000000000

file=`find ~/Sites/devdesktop/githooks-pre-push/* -name "sample-githook.info"`

line=$(sed -n '2p' $file)
verison=${line//version: }

while read local_ref local_sha remote_ref remote_sha
do
		currentTag=$(git describe --tag)

		echo $local_ref
		# if the current tag is different with version tag then prevent that push
		if [[ $currentTag != $verison ]] && [[ "$local_ref" =~ .*"tags".* ]]
		then
			echo ""
			echo ""
			echo "${RED}⚠️  Warning: Your tag and current tag are different, please update it 🤟${NC}"
			echo "${GREEN}🤷  Reckon: Change version of Treasury's info file to the tag you want to push -> '$file'  ${NC}"
			echo ""
			echo ""
			exit 1
		fi
done

exit 0
